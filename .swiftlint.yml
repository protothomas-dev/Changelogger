# Rules: https://realm.github.io/SwiftLint/rule-directory.html

#disable following rules
disabled_rules:
  - todo # TODOs and FIXMEs should be resolved.
  - multiple_closures_with_trailing_closure # Trailing closure syntax should not be used when passing more than one closure argument.
  - switch_case_alignment # Case statements should vertically align with their enclosing switch statement, or indented if configured otherwise.

# opt-in following rules
opt_in_rules:
  - closure_end_indentation # Closure end should have the same indentation as the line that started it.
  - closure_spacing # Closure expressions should have a single space inside each brace.
  - convenience_type # Types used for hosting only static members should be implemented as a caseless enum to avoid instantiation
  - empty_collection_literal # Prefer checking isEmpty over comparing collection to an empty array or dictionary literal
  - empty_count # Prefer checking isEmpty over comparing count to zero.
  - empty_string # Prefer checking isEmpty over comparing string to an empty string literal.
  - explicit_init # Explicitly calling .init() should be avoided.
  - fatal_error_message # A fatalError call should have a message.
  - force_unwrapping # Force unwrapping should be avoided.
  - literal_expression_end_indentation # Array and dictionary literal end should have the same indentation as the line that started it.
  - modifier_order # Modifier order should be consistent.
  - operator_usage_whitespace # Operators should be surrounded by a single whitespace when they are being used.
  - overridden_super_call # Some overridden methods should always call super.
  - private_action # IBActions should be private
  - private_outlet # IBOutlets should be private to avoid leaking UIKit to higher layers
  - private_subject # Combine Subject should be private
  - redundant_nil_coalescing # nil coalescing operator is only evaluated if the lhs is nil, coalescing operator with nil as rhs is redundant
  - unneeded_parentheses_in_closure_argument # Parentheses are not needed when declaring closure arguments.
  # OPTIONAL
  # - accessibility_label_for_image # Images that provide context should have an accessibility label or should be explicitly hidden from accessibility
  # - accessibility_trait_for_button # All views with tap gestures added should include the .isButton or the .isLink accessibility traits
  # - discarded_notification_center_observer # When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later
  # - discouraged_optional_boolean # Prefer non-optional booleans over optional booleans
  # - enum_case_associated_values_count # The number of associated values in an enum case should be low.
  # - expiring_todo # TODOs and FIXMEs should be resolved prior to their expiry date.
  # - file_types_order # Specifies how the types within a file should be ordered.
  # - missing_docs # Declarations should be documented.
  # - multiline_function_chains # Chained function calls should be either on the same line, or one per line
  # - multiline_parameters # Functions and methods parameters should be either on the same line, or one per line
  # - no_grouping_extension # Extensions shouldn’t be used to group code within the same source file
  # - non_overridable_class_declaration # Class methods and properties in final classes should themselves be final, just as if the declarations are private
  # - private_swiftui_state # SwiftUI state properties should be private
  # - prohibited_super_call # Some methods should not call super.
  # - required_enum_case # Enums conforming to a specified protocol must implement a specific case(s).
  # - shorthand_optional_binding # Use shorthand syntax for optional binding
  # - sorted_imports # Imports should be sorted
  # - superfluous_else #  Else branches should be avoided when the previous if-block exits the current scope
  # - test_case_accessibility # Test cases should only contain private non-test members
  # - toggle_bool # Prefer someBool.toggle() over someBool = !someBool
  # - type_contents_order # Specifies the order of subtypes, properties, methods & more within a type.
  # - unavailable_function # Unimplemented functions should be marked as unavailable
  # - unhandled_throwing_task # Errors thrown inside this task are not handled, which may be unexpected.
  # - vertical_parameter_alignment_on_call # Function parameters should be aligned vertically if they’re in multiple lines in a method call
  # - weak_delegate # Delegates should be weak to avoid reference cycles
  # - xct_specific_matcher # Prefer specific XCTest matchers over XCTAssertEqual and XCTAssertNotEqual.
  # - yoda_condition # The constant literal should be placed on the right-hand side of the comparison operator

# Use these rules to analyze the project
# To use swift analyzer, build the project and analyze the output
#
# xcodebuild -workspace {WORKSPACE}.xcworkspace -scheme {SCHEME} > xcodebuild.log
# swiftlint analyze --compiler-log-path xcodebuild.log --output output --config .swiftlint.yml
#
analyzer_rules:
  - unused_declaration # Declarations should be referenced at least once within all files linted
  - unused_import # All imported modules should be required to make the file compile

# paths to include
included:
  - Sources


# custom values
cyclomatic_complexity:
  ignores_case_statements: true

file_length:
  warning: 600
  error: 800

force_cast: warning
force_try: warning

function_body_length:
  warning: 40
  error: 80

identifier_name:
  min_length:
    error: 0
    warning: 0

line_length:
  warning: 200
  error: 220
  ignores_comments: true

nesting:
  type_level:
    warning: 2

trailing_whitespace:
  ignores_empty_lines: true

type_body_length:
  warning: 275
  error: 400

vertical_whitespace:
  max_empty_lines: 2